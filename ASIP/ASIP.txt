Up/Down sampling

import cv2
img= cv2.imread('test.jpg')
print("size:",img.shape)
cv2.imshow ('Upsample',cv2.pyrUp(img))
cv2.imshow ('Downsample',cv2.pyrDown(img))

DFT(Fast Fourier Transform)

import numpy as np
import matplotlib.pyplot as plotter
# How many time points are needed i,e. Sampling Frequency
samplingfrequency = 100;
# At what intervals time points are sampled
samplingInterval = 1 / samplingfrequency;
#Begin time period of the signals
beginTime = 0;
#End time period of the signals
endTime = 10;
#Frequency of the signals
signal1Frequency = 4;
signal2Frequency = 7;
signal3Frequency = 10;
# Time points
time = np.arange(beginTime, endTime, samplingInterval);
# Create two sine waves
amplitude1 = np.sin(2*np.pi*signal1Frequency*time)
amplitude2 = np.sin(2*np.pi*signal2Frequency*time)
amplitude3 = np.sin(2*np.pi*signal3Frequency*time)
# Create subplot
figure, axis = plotter.subplots(4, 1)
plotter.subplots_adjust(hspace=1)
#Time domain representation for sine wave 1
axis[0].set_gid('Sine wave with a frequency of 4 Hz')
axis[0].plot(time, amplitude1)
axis[0].set_xlabel('Time')
axis[0].set_ylabel('Amplitude')
# Time domain representaion for sine wave 2
axis[1].set_gid('Sine wave with a frequency of 7 Hz')
axis[1].plot(time, amplitude2)
axis[1].set_xlabel('Time')
axis[1].set_ylabel('Amplitude')
# Time domain representaion for sine wave 3
axis[2].set_gid('Sine wave with a frequency of 10 Hz')
axis[2].plot(time, amplitude3)
axis[2].set_xlabel('Time')
axis[2].set_ylabel('Amplitude')
# Add the sine waves
amplitude = amplitude1 + amplitude2 + amplitude3
# Time domain representation of the resultant sine wave
axis[2].set_gid('Sine wave with multiple frequencies')
axis[2].plot(time, amplitude)
axis[2].set_xlabel('Time')
axis[2].set_ylabel('Amplitude')
# Frequency domain representation
fourierTransform = np.fft.fft(amplitude)/len(amplitude)
#Normalize amplitude
fourierTransform = fourierTransform[range(int(len(amplitude)/2))]
#Exclude sampling frequecy
tpCount = len(amplitude)
values = np.arange(int(tpCount/2))
timePeriod = tpCount/samplingfrequency
frequencies = values/timePeriod
# Frequency domain representation
axis[3].plot(frequencies, abs(fourierTransform))
axis[3].set_xlabel('Frequency')
axis[3].set_ylabel('Amplitude')
plotter.show()

Triangle

from scipy import signal
import matplotlib.pyplot as plt
import numpy as np
t = np.linspace(0, 1, 500)
plt.plot(t,signal.sawtooth(2*np.pi*3*t,0.5))
plt.xlabel('Time')
plt.xlabel('Amplitude')
plt.title('Triangle Signal')
plt.show()

Signal plot

from scipy import signal
import matplotlib.pyplot as plt
import numpy as np
rng = np.random.default_rng()
x = np.arange(128) / 128
sig = np.sin(2* np.pi*x)
sig_noise = sig+rng.standard_normal(len(sig))
corr = signal.correlate(sig_noise, sig)
lags = signal.correlation_lags(len(sig), len(sig_noise))
corr /= np.max(corr)
fig, (ax_orig, ax_noise, ax_corr) = plt.subplots(3, 1, figsize = (4.8, 4.8))
ax_orig.plot(sig)
ax_orig.set_title("Original Signal")
ax_orig.set_xlabel("Sample Signal")
ax_noise.plot(sig_noise)
ax_noise.set_title("Signal With Noise")
ax_noise.set_xlabel("Sample Number")
ax_corr.plot(lags, corr)
ax_corr.set_title("Correlated Signal")
ax_corr.set_xlabel("Lag")
ax_orig.margins(0, 0.1)
ax_noise.margins(0, 0.1)
ax_corr.margins(0, 0.1)
fig.tight_layout()
plt.show()

Convolution Operation

import cv2
import numpy as np
image = cv2.imread('test.jpg')
blur_kernel=np.ones((5,5), np.float32)/25
img=cv2.filter2D(src=image, ddepth=-1, kernel=blur_kernel)
sharp_kernel=np.array([[0,-1,0],[-1,5,-1],[0,-1,0]])
sharp_img = cv2.filter2D(src=image, ddepth=-1, kernel=sharp_kernel)
cv2.imshow('original',image)
cv2.imshow('sharpened',sharp_img)
cv2.imshow('kernel blur', img)
cv2.imwrite('sharp_image.jpg',sharp_img)
cv2.imwrite('blur_kernel.jpg',img)
cv2.waitKey()
cv2.destroyAllWindows()

Template Match

#Python program to illustrate
#Template macthing
import cv2
import numpy as np
#Read the main image
img_rgb = cv2.imread('Sprite.jpg')
#Convert it to grayscale
img_grey = cv2.cvtColor(img_rgb, cv2.COLOR_BGR2GRAY)
#Read the template
template = cv2.imread('Template.jpg',0)
#Store width and height of template in w and h
w,h = template.shape[::-1]
#Perform match operations
res = cv2.matchTemplate(img_grey,template,cv2.TM_CCOEFF_NORMED)
#Specifying a threshhold
threshold = 0.8
#Store the coordinates of matched area in a numpy array
oc = np.where(res >= threshold)
#Draw a rectangle arounch the matched region
for pt in zip(*oc[::-1]):
cv2.rectangle(img_rgb, pt, (pt[0] + w, pt[1] + h),(0,255,255),2)
#Show the final image with the matched area
cv2.imshow('Detected',img_rgb)

Log Transformation

import cv2
import numpy as np
import matplotlib.pyplot as plt
import time
timestr = time.strftime("%Y%m%d_%H%M")
print(timestr)
image = cv2.imread('test.jpg')
c = 255 / np.log(1 + np.max(image))
log_image = c * (np.log(image + 1))
log_image = np.array(log_image, dtype = np.uint8)
plt.imshow(image)
plt.savefig('Original'+timestr+'.png')
plt.show()
plt.imshow(log_image)
plt.savefig('Log_trans'+timestr+'png')
plt.show()

Contrast Adjustment

import cv2
def funcBrightContrast(bright=0):
 bright = cv2.getTrackbarPos('bright', 'adj')
 contrast = cv2.getTrackbarPos('contrast', 'adj')
 effect = apply_brightness_contrast(img,bright,contrast)
 cv2.imshow('Effect', effect)
def apply_brightness_contrast(input_img, brightness = 255, contrast = 127):
 brightness = map(brightness, 0, 510, -255, 255)
 contrast= map (contrast,0,254,-127,127)
 if brightness != 0:
     if brightness > 0:
         shadow = 0
         highlight = 255
     else:
         shadow = 0
         highlight = 255 + brightness
     alpha_b = (highlight - shadow)/255
     gamma_b = shadow
     buf = cv2.addWeighted(input_img, alpha_b, input_img, 0, gamma_b)
 else:
     buf = input_img.copy()
 if contrast !=0:
     f = float(131 * (contrast +127)) / (127 * (131 - contrast))
     alpha_c = f
     gamma_c = 127*(1-f)
     buf = cv2.addWeighted(buf, alpha_c, buf, 0, gamma_c)
 cv2.putText(buf, 'B:{},C:{}'.format(brightness, contrast),(10,30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
 return buf
def map(x, in_min, in_max, out_min, out_max):
 return int((x-in_min) * (out_max-out_min)/(in_max-in_min)+out_min)
if __name__ == '__main__':
 original = cv2.imread("2.png", 1)
 img = original.copy()
 cv2.namedWindow('adj',1)
 bright = 255
 contrast = 127
 cv2.createTrackbar('bright', 'adj', bright, 2*255, funcBrightContrast)
 cv2.createTrackbar('contrast', 'adj', contrast, 2*127, funcBrightContrast)
 cv2.imshow('adj', original)
cv2.waitKey(0)

Histogram

import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt
img = cv.imread('test.jpg',0)
ret,thresh1 = cv.threshold(img,127,255,cv.THRESH_BINARY)
ret,thresh2 = cv.threshold(img,127,255,cv.THRESH_BINARY_INV)
ret,thresh3 = cv.threshold(img,127,255,cv.THRESH_TRUNC)
ret,thresh4 = cv.threshold(img,127,255,cv.THRESH_TOZERO)
ret,thresh5 = cv.threshold(img,127,255,cv.THRESH_TOZERO_INV)
titles = ['Original Image','BINARY','BINARY_INV','TRUNC','TOZERO','TOZERO_INV']
images = [img,thresh1,thresh2,thresh3,thresh4,thresh5]
for i in range(6):
 plt.subplot(2,3,i+1),plt.imshow(images[i],'gray',vmin=0,vmax=255)
 plt.title(titles[i])
 plt.xticks([]),plt.yticks([])
plt.show()

Threshhold 

import cv2 as cv
import numpy as np
from matplotlib import pyplot as plt
img = cv.imread("2.png")
ret,thresh1 = cv.threshold(img,127,255,cv.THRESH_BINARY)
ret,thresh2 = cv.threshold(img,127,255,cv.THRESH_BINARY_INV)
ret,thresh3 = cv.threshold(img,127,255,cv.THRESH_TRUNC)
ret,thresh4 = cv.threshold(img,127,255,cv.THRESH_TOZERO)
ret,thresh5 = cv.threshold(img,127,255,cv.THRESH_TOZERO_INV)
titles=["OriginalImage","BINARY","BINARY_INV","TRUNC","TOZERO","TOZERO_INV"]
images=[img,thresh1,thresh2,thresh3,thresh4,thresh5]
for i in range(6):
 plt.subplot(2,3,i+1),plt.imshow(images[i],"gray",vmin=0,vmax=255)
 plt.title(titles[i])
 plt.xticks([]),plt.yticks([])
plt.show()

Gradient Laplash

import cv2
img=cv2.imread('test.jpg')
ddepth=cv2.CV_16S
kernel_size=3
red_Noise=cv2.GaussianBlur(img,(3,3),0)
gray=cv2.cvtColor(red_Noise,cv2.COLOR_BGR2GRAY)
dst=cv2.Laplacian(gray,ddepth,ksize=kernel_size)
abs_dst=cv2.convertScaleAbs(dst)
cv2.imshow('Laplacian image',abs_dst)

6A linear/non noice

import numpy as np
import cv2
from matplotlib import pyplot as plt
from PIL import Image,ImageFilter
image=cv2.imread('test.jpg')
image=cv2.cvtColor(image,cv2.COLOR_BGR2HSV)
figure_size=9
gauss=np.random.normal(0,1,image.size)
gauss=gauss.reshape(image.shape[0],image.shape[1],image.shape[2]).astype('uint8')
img_gauss=cv2.add(image,gauss)
new_image=cv2.GaussianBlur(image,(figure_size,figure_size),0)
plt.figure(figsize=(11,6))
plt.subplot(121)
plt.imshow(cv2.cvtColor(img_gauss,cv2.COLOR_HSV2RGB))
plt.title('Gaussian Noise')
plt.xticks([]),plt.yticks([])
plt.subplot(122),plt.imshow(cv2.cvtColor(new_image,cv2.COLOR_HSV2RGB)),plt.title('Gaussian Filter')
plt.xticks([]),plt.yticks([])
plt.show()

6B linear/non noice

import cv2
noisy_img=cv2.imread('test.jpg',1)
cv2.imshow('Original Image',noisy_img)
size=5
denoise_img=cv2.medianBlur(noisy_img,size)
cv2.imshow('Denoised Image',denoise_img)

Masking filters Sharp/Unsharp

import cv2 
import numpy as np 
img = cv2.imread('test.jpg') 
cv2.imshow('Original Image', img) 
kernel = np.array([[-1, -1, -1],[-1, 9, -1],[-1, -1, -1]]) 
sharp_img = cv2.filter2D(img, -1, kernel = kernel) 
cv2.imshow('Sharpening Image', sharp_img) 
gaussian_3 = cv2.GaussianBlur(img, (0,0),2.0) 
unsharp_image = cv2.addWeighted(img, 1.5, gaussian_3, -0.5, 0, img)
cv2.imshow('Unsharpning Image', unsharp_image)

7B Smooth

import cv2
import numpy as np
import matplotlib.pyplot as plt
img = cv2.imread('test.jpg')
kernel = np.ones((5,5), np.float32)/25
dst = cv2.filter2D(img, -1, kernel)
plt.subplot(121),plt.imshow(img),plt.title('Original')
plt.xticks([]),plt.yticks([])
plt.subplot(122),plt.imshow(dst),plt.title('Smoothened Image')
plt.xticks([]),plt.yticks([])
plt.show()

8 SobelXY

import cv2 
img = cv2.imread('test.jpg') 
cv2.imshow('Original',img) 
cv2.waitKey(0) 
img_gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY) 
img_blur = cv2.GaussianBlur(img_gray,(3,3),0) 
sobelx = cv2.Sobel(src = img_blur, ddepth = cv2.CV_64F, dx=1,dy=0,ksize=5)
sobely = cv2.Sobel(src = img_blur, ddepth = cv2.CV_64F, dx=0,dy=1,ksize=5)
sobelxy = cv2.Sobel(src = img_blur, ddepth = cv2.CV_64F, dx=1,dy=1,ksize=5) 
cv2.imshow('Sobe1X', sobelx) 
cv2.waitKey(0) 
cv2.imshow('Sobe1Y', sobely) 
cv2.waitKey(0) 
cv2.imshow('Sobe1XY', sobelxy) 
cv2.waitKey(0) 
edges = cv2.Canny(image = img_blur, threshold1=100, threshold2=200) 
cv2.imshow('Canny Edge Detection', edges) 
cv2.waitKey(0) 
cv2.destroyAllWindows()

Morphological Image

import cv2 
import numpy as np 
image = cv2.imread('test.jpg') 
kernel = np.ones((5,5),np.uint8) 
erosion = cv2.erode(image,kernel,iterations=1) 
dilation = cv2.dilate(image,kernel,iterations=1) 
opening = cv2.morphologyEx(image,cv2.MORPH_OPEN,kernel) 
closing = cv2.morphologyEx(image,cv2.MORPH_CLOSE,kernel) 
gradient = cv2.morphologyEx(image,cv2.MORPH_GRADIENT,kernel) 
cv2.imshow('Original',image) 
cv2.imshow('erosion',erosion) 
cv2.imshow('dilation',dilation) 
cv2.imshow('opening',opening) 
cv2.imshow('closing',closing) 
cv2.imshow('gradient',gradient)

10.1 Blob

import cv2
import numpy as np

img=cv2.imread("test.jpg")

gray_img=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
gray_img=np.float32(gray_img)

dst=cv2.cornerHarris(gray_img,2,3,0.04)
dst=cv2.dilate(dst,None)

img[dst>0.01*dst.max()]=[0,0,255]
cv2.imshow("output",img)
cv2.waitKey(1)
cv2.imwrite("corner10.1_output,jpg",img)

10.2 Hog

import cv2
from skimage.feature import hog
ori=cv2.imread("test.jpg")
img=cv2.imread("test.jpg")
_,hog_image=hog(img,orientations=8,pixels_per_cell=(16,16),cells_per_block=(1,1),visualize=True,multichannel=True)
cv2.imshow("Original Image",ori)
cv2.imshow("HoG",hog_image)
cv2.imwrite("original.jpg",ori)
cv2.imwrite("HoG.jpg",hog_image)

10.3 Haar

import cv2
import numpy as np
import matplotlib.pyplot as plot
face_cascade=cv2.CascadeClassifier("harrcascade_frontalface_default.xml")
eye_cascade=cv2.CascadeClassifier("harrcascade_eye.xml")
img = cv2.imread("test.jpg")
gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
faces=face_cascade.detectMultiScale(gray,1.3,5)
for(x,y,w,h)in faces:
    cv2.rectangle(img(x,y),(x+w+y+h),(255,0,0),2)
    roi_gray=gray[y:y+h,x:x+w]
    roi_color=img[y:y+h,x:x+w]
    eyes=eye_cascade.detectMultiScale(roi_gray)
    for(ex,ey,ew,eh) in eyes:
        cv2.rectangle(roi_color,(ex,ey),ex+ew,ey+eh,(0,255,0),2)
cv2.imshow("img",img)
cv2.imwrite("detected.jpg",img)
cv2.waitKey(0)
cv2.destroyAllWindows()
